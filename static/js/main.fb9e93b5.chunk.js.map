{"version":3,"sources":["container/Header.js","reducers/CreateBoardReducer.js","actions/ActionType.js","reducers/NewBoardsCollection.js","reducers/SelectBoardReducer.js","reducers/ActiveBoardData.js","reducers/combineReducers.js","store/store.js","store/localstorage.js","components/board/CreateBoard/CreateBoard.js","components/board/ActiveBoard/ActiveBoard.js","components/board/newBoard/newBoard.js","components/BoardWrapper.js","actions/ActionCreateBoard.js","actions/CloseList.js","components/lists/list/NewList.js","actions/CreatingLists.js","components/lists/list/CreateNewList.js","components/lists/list/AddList.js","components/lists/card/card.js","actions/Arhive.js","components/lists/ListWrapper.js","actions/OpenList.js","components/BoardsLinkWrapper.js","actions/SelecteBoard.js","container/App.js","serviceWorker.js","index.js"],"names":["Header","className","to","initial","isBoardOpen","title","id","newBoard","state","type","payload","Date","getTime","initialState","generateBoard","isFetching","isEditingList","activeBoard","ActiveBoardReducer","combineReducers","listItems","listId","uniqueId","data","name","cards","cardName","cardId","currentList","push","isArchived","findCard","find","card","rootReducer","boardsCollection","activeBoardData","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","middleware","applyMiddleware","thunk","Store","createStore","composeWithDevTools","subscribe","throttle","boards","map","board","serializeActiveBoardState","stringify","setItem","Error","saveState","getState","CreateBoard","onClick","defaultProps","ActiveCreateBoard","defaultValue","closeBoard","onChange","onKeyPress","onBlur","NewBoard","BoardWrapper","openBoard","submitNewBoard","useState","text","setText","target","document","getElementById","style","cssText","key","length","value","getID","propType","PropTypes","object","array","func","isRequired","connect","dispatch","store","closeList","submitTask","children","placeholder","createNewList","AddList","Card","items","archiveCard","openList","BoardData","Object","values","selectBoard","item","match","useEffect","params","App","exact","path","component","BoardsLinkWrapper","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb9e93b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../style/scss/header.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Header = () => (\r\n        <div className=\"logo-wrapper\">\r\n            <Link to=\"/\">\r\n                <svg className=\"logo\"></svg>\r\n            </Link>\r\n        </div>\r\n);\r\n\r\nexport default Header;","import { OPEN_BOARD, CLOSE_BOARD, SUBMIT_BOARD } from '../actions/ActionType';\r\n\r\n\r\nconst initial = {\r\n    isBoardOpen: false,\r\n    title: null,\r\n    id: null\r\n}\r\n\r\nconst newBoard = (state = initial, { type, payload }) => {\r\n    switch(type){\r\n        case OPEN_BOARD:\r\n            return {\r\n                ...state,\r\n                isBoardOpen: true,\r\n                title: null,\r\n                id: null\r\n            }\r\n        case CLOSE_BOARD:\r\n            return {\r\n                ...state,\r\n                isBoardOpen: false,\r\n                title: null,\r\n                id: null\r\n            }\r\n        case SUBMIT_BOARD:\r\n            return {\r\n                ...state,\r\n                isBoardOpen: false,\r\n                title: payload,\r\n                id: (new Date().getTime())\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default newBoard;","export const OPEN_BOARD = \"OPEN_BOARD\";\r\nexport const CLOSE_BOARD = \"CLOSE_BOARD\";\r\nexport const SUBMIT_BOARD = \"SUBMIT_BOARD\";\r\nexport const STORE_NEW_BOARD_TO_COLLECTION = \"STORE_NEW_BOARD_TO_COLLECTION\";\r\nexport const SELECT_BOARD = \"SELECT_BOARD\";\r\nexport const SELECT_BOARD_SUCCESS = \"SELECT_BOARD_SUCCESS\";\r\nexport const OPEN_LIST = \"OPEN_LIST\";\r\nexport const CLOSE_LIST = \"CLOSE_LIST\";\r\nexport const CREATE_NEW_LIST = \"EDIT_NEW_LIST\";\r\nexport const SUBMIT_TASK = \"SUBMIT_TASK\";\r\nexport const ARCHIVE_POST = \"ARCHIVE_POST\";\r\n","import { STORE_NEW_BOARD_TO_COLLECTION } from '../actions/ActionType';\r\n\r\nconst initialState = [];\r\n\r\nconst generateBoard = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case STORE_NEW_BOARD_TO_COLLECTION:\r\n            return [...state, payload]\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nexport default generateBoard;","import {SELECT_BOARD, SELECT_BOARD_SUCCESS, OPEN_LIST, CLOSE_LIST} from '../actions/ActionType';\r\n\r\nconst initialState = {\r\n    title: null,\r\n    id: null,\r\n    isFetching: false,\r\n    isEditingList: false,\r\n}\r\n\r\nconst activeBoard = (state = initialState, { type, payload }) => {\r\n    switch(type){\r\n        case SELECT_BOARD:\r\n            return {\r\n                ...state,\r\n                title: payload.title,\r\n                id: payload.id,\r\n                isFetching: true,\r\n            }\r\n        case SELECT_BOARD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n            }\r\n        case OPEN_LIST:\r\n            return {\r\n                ...state,\r\n                isEditingList: payload\r\n            }\r\n        case CLOSE_LIST:\r\n            return {\r\n                ...state,\r\n                isEditingList: payload\r\n            }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n};\r\n\r\nexport default activeBoard;","import { CREATE_NEW_LIST, SUBMIT_TASK, SELECT_BOARD, ARCHIVE_POST} from '../actions/ActionType';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { combineReducers } from 'redux';\r\n\r\n\r\nconst ListReducer = (state = {}, { type, payload }) => {\r\n    const listId = uniqueId(\"list_\");\r\n\r\n    switch(type){\r\n        case SELECT_BOARD:\r\n            return payload.data || []\r\n        case CREATE_NEW_LIST:\r\n            return {\r\n                ...state,\r\n                [listId]: {\r\n                    name: payload,\r\n                    id: listId,\r\n                    cards: []\r\n                }\r\n            }\r\n        case SUBMIT_TASK: {\r\n            const { listId, cardName, cardId } = payload;\r\n            const currentList = state[listId];\r\n            currentList.cards.push({ name: cardName, cardId, listId, isArchived: false })\r\n            return {\r\n                ...state,\r\n                [listId]: currentList,\r\n            }\r\n        }\r\n        case ARCHIVE_POST: {\r\n            const { cardId, listId } = payload;\r\n            const currentList = state[listId];\r\n            const findCard = currentList.cards.find(card => card.cardId === cardId);\r\n\r\n            if (findCard.isArchived === false) {\r\n                findCard.isArchived = true;\r\n            } else {\r\n                findCard.isArchived = false;\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                [listId]: currentList\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst ActiveBoardReducer  = combineReducers({\r\n    listItems: ListReducer,\r\n})\r\n\r\nexport default ActiveBoardReducer;","import { combineReducers } from 'redux';\r\nimport newBoard from './CreateBoardReducer';\r\nimport generateBoard from './NewBoardsCollection';\r\nimport activeBoard from './SelectBoardReducer';\r\nimport ActiveBoardReducer  from './ActiveBoardData';\r\n\r\nconst rootReducer = combineReducers({\r\n    newBoard: newBoard,\r\n    boardsCollection: generateBoard,\r\n    activeBoard: activeBoard,\r\n    activeBoardData: ActiveBoardReducer \r\n});\r\n\r\nexport default rootReducer;","import { createStore,  applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers/combineReducers';\r\nimport throttle from 'lodash/throttle';\r\nimport { loadState, saveState } from './localstorage';\r\n\r\nconst persistedState = loadState();\r\n\r\n\r\nconst middleware = applyMiddleware(thunk);\r\n\r\n\r\nconst Store =  createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    composeWithDevTools(middleware),\r\n);\r\n\r\nStore.subscribe(throttle(() => {\r\n    saveState({\r\n        boardsCollection: Store.getState().boardsCollection,\r\n        newBoard: Store.getState().newBoard,\r\n        activeBoard: Store.getState().activeBoard,\r\n        activeBoardData: Store.getState().activeBoardData,\r\n    })\r\n}, 1000));\r\n\r\n\r\nexport default Store;","export const loadState = () => {\r\n    try {\r\n      const serializedState = localStorage.getItem(\"boardsCollection\");\r\n      if (serializedState === null) {\r\n        return undefined;\r\n      }\r\n      return JSON.parse(serializedState);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  };\r\n  \r\n  export const saveState = boards => {\r\n    try {\r\n      boards.boardsCollection.map((board) => {\r\n        return board.id === boards.activeBoard.id ?\r\n          board.data = boards.activeBoardData.listItems : null\r\n      })\r\n        const serializeActiveBoardState = JSON.stringify(boards)\r\n        localStorage.setItem('boardsCollection', serializeActiveBoardState);\r\n    } catch (err) {\r\n        new Error(err);\r\n    }\r\n}","import React from 'react';\r\nimport \"../../../style/scss/board-wrapper.scss\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst CreateBoard = ({ onClick }) => {\r\n    return(\r\n        <div className=\"create-board\" onClick={onClick}>\r\n            <h1>Create a board</h1>\r\n        </div>\r\n    )\r\n};\r\n\r\nCreateBoard.propTypes = {\r\n    onClick: PropTypes.func.isRequired\r\n}\r\n\r\nCreateBoard.defaultProps = {\r\n    onClick: () => {}\r\n}\r\n\r\n\r\nexport default CreateBoard;","import React from 'react';\r\nimport \"../../../style/scss/board-wrapper.scss\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst ActiveCreateBoard = ({ defaultValue, closeBoard, onClick, onChange, onKeyPress, onBlur }) => {\r\n    return(\r\n        <div className=\"active-create-board\">\r\n            <div className=\"board-title\">\r\n                <h1>Creating a board</h1>\r\n                <svg onClick={() => closeBoard()} className=\"icon-exit\"></svg>\r\n            </div>\r\n            <div className=\"board-main\">\r\n                <p>What shall we call the board?</p>\r\n                <input id=\"inputean\" onBlur={onBlur} onKeyPress={onKeyPress}  onChange={onChange} type=\"text\" defaultValue={defaultValue} />\r\n            </div>\r\n            <div className=\"board-footer\">\r\n                <button onClick={() => closeBoard()}>cancel</button>\r\n                <button onClick={onClick}>create</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nActiveCreateBoard.propTypes = {\r\n    defaultValue: PropTypes.string,\r\n    onClick: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    onKeyPress: PropTypes.func,\r\n    onBlur: PropTypes.func,\r\n    closeBoard: PropTypes.func,\r\n}\r\n\r\nActiveCreateBoard.defaultProps = {\r\n    defaultValue: \"\",\r\n    onClick: () => {},\r\n    onChange: () => {},\r\n    onKeyPress: () => {},\r\n    onBlur: () => {},\r\n    closeBoard: () => {}\r\n}\r\n\r\n\r\n\r\nexport default ActiveCreateBoard;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst NewBoard = ({ id, title }) => {\r\n    return(\r\n        <Link id={id} to={`/b/${id}`}>\r\n            <div className=\"newBoard\">\r\n                <h1>{title}</h1>\r\n            </div>\r\n        </Link>\r\n    )\r\n};\r\n\r\nNewBoard.propTypes = {\r\n    id: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    title: PropTypes.string,\r\n};\r\n\r\nexport default NewBoard;","import React, { useState } from 'react';\r\nimport '../style/scss/board-wrapper.scss';\r\nimport { connect } from 'react-redux';\r\nimport { openBoard, closeBoard, submitNewBoard } from '../actions/ActionCreateBoard';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Components\r\nimport CreateBoard from './board/CreateBoard/CreateBoard';\r\nimport ActiveCreateBoard from './board/ActiveBoard/ActiveBoard';\r\nimport NewBoard from './board/newBoard/newBoard';\r\n\r\n\r\nconst BoardWrapper = ({ newBoard, openBoard, closeBoard, submitNewBoard, boardsCollection }) => {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const getValues = ({ target: { value, id } }) => {\r\n        setText(value);\r\n        const getID = document.getElementById(id);\r\n        if(value.length === 1 || value.length < 3){\r\n            getID.style.cssText= \"border: 3px solid red\";\r\n        }else{\r\n            getID.style.cssText= \"border: 3px solid lightgreen\";\r\n        }\r\n    }\r\n    const cancelRed = ({ target: { id } }) => {\r\n        const getID = document.getElementById(id);\r\n        getID.style.cssText= \"border: none\";\r\n    }\r\n\r\n    const handleClickRenderNewBoard = () => {\r\n        if(text.length > 2){\r\n        submitNewBoard(text);\r\n        setText(\"\");\r\n        closeBoard();\r\n        }\r\n    }\r\n\r\n    const handlePressRenderNewBoard = ({ key }) => {\r\n        if(key === \"Enter\" && text.length > 2){\r\n        submitNewBoard(text);\r\n        setText(\"\");\r\n        closeBoard();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"board-wrapper\">\r\n        { newBoard.isBoardOpen ? <ActiveCreateBoard onBlur={cancelRed} onKeyPress={handlePressRenderNewBoard} onChange={getValues} defaultValue={text} onClick={handleClickRenderNewBoard} closeBoard={closeBoard} /> : <CreateBoard onClick={openBoard} />}\r\n        { boardsCollection.map(({ id, title }) => {\r\n            return <NewBoard key={id} id={id} title={title} />\r\n        }) }\r\n        </div>\r\n    ) \r\n};\r\n\r\nBoardWrapper.propType = {\r\n    newBoard: PropTypes.object,\r\n    boardsCollection: PropTypes.array,\r\n    openBoard: PropTypes.func.isRequired,\r\n    closeBoard: PropTypes.func.isRequired,\r\n    submitNewBoard: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(({ newBoard, boardsCollection }) => ({\r\n    newBoard,\r\n    boardsCollection\r\n}), { openBoard, closeBoard, submitNewBoard })(BoardWrapper);","import { OPEN_BOARD, CLOSE_BOARD, SUBMIT_BOARD, STORE_NEW_BOARD_TO_COLLECTION } from './ActionType';\r\nimport store from '../store/store';\r\n\r\n\r\nexport const openBoard = () => ({\r\n    type: OPEN_BOARD,\r\n    payload: true\r\n});\r\n\r\nexport const closeBoard = () => ({\r\n    type: CLOSE_BOARD,\r\n    payload: false\r\n});\r\n\r\nexport const submitNewBoard = (title) => {\r\n    return dispatch => {\r\n        dispatch({ type: SUBMIT_BOARD, payload: title });\r\n\r\n        const newBoard = {\r\n            id: store.getState().newBoard.id,\r\n            title: store.getState().newBoard.title\r\n        }\r\n\r\n        dispatch({ type: STORE_NEW_BOARD_TO_COLLECTION, payload: newBoard });\r\n    }\r\n}","import { CLOSE_LIST } from './ActionType';\r\n\r\n\r\nexport const closeList = () => dispatch => {\r\n    dispatch({ type: CLOSE_LIST, payload: false })\r\n};","import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { submitTask } from '../../../actions/CreatingLists';\r\n\r\n\r\nconst NewList = ({ id, name,  submitTask, children }) => {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const getValue = ({ target: { value } }) => {\r\n        setText(value);\r\n    }\r\n\r\n    const addTask = ({ key }) => {\r\n        if(key === \"Enter\" && text.length > 2){\r\n            submitTask(text, (new Date().getTime()), id);\r\n            setText(\"\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div id={id} className=\"new-list-block\">\r\n                <h2>{name}</h2>\r\n                <input onKeyPress={addTask} onChange={getValue} value={text} type=\"text\" placeholder=\"add task...\" />\r\n                { children }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nNewList.propTypes = {\r\n    submitTask: PropTypes.func,\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n}\r\n\r\n\r\nexport default connect(null, { submitTask })(NewList);","import { CREATE_NEW_LIST, SUBMIT_TASK } from './ActionType';\r\n\r\n\r\n\r\nexport const createNewList = (name) => dispatch => {\r\n    dispatch({type: CREATE_NEW_LIST, payload: name})\r\n};\r\n\r\n\r\nexport const submitTask = (cardName, cardId, listId) => dispatch => {\r\n    dispatch({ type: SUBMIT_TASK, payload: { cardName, listId, cardId } })\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createNewList } from '../../../actions/CreatingLists';\r\nimport { closeList } from '../../../actions/CloseList';\r\n\r\n\r\n\r\nconst CreateNewList = ({ onClick, createNewList, closeList }) => {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const getName = ({ target: { value } }) => {\r\n        setText(value);\r\n    };\r\n\r\n    const submitName = ({ key }) => {\r\n        if(key === \"Enter\"){\r\n            createNewList(text);\r\n            closeList();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"open-list-block\">\r\n            <div className=\"open-list-container\">\r\n                <svg onClick={onClick}></svg>\r\n                <input onKeyPress={submitName} onChange={getName} value={text} type=\"text\" placeholder=\"Create list\" />\r\n                <p>give me a name.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nCreateNewList.propTypes = {\r\n    onClick: PropTypes.func,\r\n    createNewList: PropTypes.func,\r\n    closeList: PropTypes.func\r\n}\r\n\r\n\r\nexport default connect(null, { createNewList, closeList })(CreateNewList);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddList = ({ onClick }) => {\r\n    return (\r\n        <div className=\"add-list\" onClick={onClick}>\r\n            Add a list...\r\n        </div>\r\n    )\r\n};\r\n\r\nAddList.propTypes = {\r\n    onClick: PropTypes.func.isRequired\r\n}\r\n\r\nAddList.defaultProps = {\r\n    onClick: () => {}\r\n}\r\n\r\nexport default AddList;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { archiveCard } from '../../../actions/Arhive';\r\n\r\n\r\nconst Card = ({ items, archiveCard }) => {\r\n    return (\r\n        <ul className=\"card-list\" >\r\n                { items.map(({ cardId, listId, name, isArchived }) => {\r\n                return <li className={isArchived ? \"card-item-through\" : \"card-item\" } key={cardId} id={cardId}>\r\n                        <p>{name}</p>\r\n                        <div onClick={() => archiveCard(cardId, listId)}><i className=\"fas fa-check\"></i></div>\r\n                    </li>\r\n            }) }\r\n        </ul>\r\n    )\r\n};\r\n\r\nCard.propTypes = {\r\n    items: PropTypes.array.isRequired,\r\n    archiveCard: PropTypes.func\r\n\r\n}\r\n\r\nCard.defaultProps = {\r\n    items: [],\r\n    archiveCard: () => {}\r\n}\r\n\r\n\r\nexport default connect(({ activeBoardData }) => ({activeBoardData}), { archiveCard })(Card);","import { ARCHIVE_POST } from './ActionType';\r\n\r\nexport const archiveCard = (cardId, listId) => dispatch => {\r\n    dispatch({ type: ARCHIVE_POST, payload: { cardId, listId } });\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { openList } from '../../actions/OpenList';\r\nimport { closeList } from '../../actions/CloseList';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Components\r\nimport NewList from './list/NewList';\r\nimport CreateNewList from './list/CreateNewList';\r\nimport AddList from './list/AddList';\r\nimport Card from './card/card';\r\n\r\n\r\nconst ListWrapper = ({ activeBoard, openList, closeList, activeBoardData  }) => {\r\n\r\n    const handleOpenList = () => {\r\n        openList();\r\n    }\r\n\r\n    const handleCloseList = () => {\r\n        closeList();\r\n    }\r\n    const BoardData = Object.values(activeBoardData.listItems);\r\n    return(\r\n        <div className=\"list-wrapper\">\r\n            {BoardData.map(({ name, id, cards }) => {\r\n                return <NewList key={id} id={id} name={name} >\r\n                    <Card items={cards} />\r\n                </NewList>\r\n            })}\r\n            {activeBoard.isEditingList ? <CreateNewList onClick={handleCloseList} /> : <AddList onClick={handleOpenList} />}\r\n        </div>\r\n    )\r\n};\r\n\r\nListWrapper.propTypes = {\r\n    activeBoard: PropTypes.object,\r\n    activeBoardData: PropTypes.object,\r\n    openList: PropTypes.func.isRequired,\r\n    closeList: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(({ activeBoard, activeBoardData  }) => ({\r\n    activeBoard,\r\n    activeBoardData\r\n}), { openList, closeList })(ListWrapper);","import { OPEN_LIST } from './ActionType';\r\n\r\n\r\nexport const openList = () => dispatch => {\r\n    dispatch({ type: OPEN_LIST, payload: true })\r\n};","import React, { useEffect } from 'react';\r\nimport '../style/scss/active-board-wrapper.scss';\r\nimport { connect } from 'react-redux';\r\nimport { selectBoard } from '../actions/SelecteBoard';\r\nimport PropTypes from 'prop-types';\r\n//Components\r\nimport ListWrapper from './lists/ListWrapper';\r\n\r\nconst BoardsLinkWrapper = ({ activeBoard, selectBoard, match }) => {\r\n\r\n    useEffect(() => {\r\n        selectBoard(match.params.id)\r\n    }, [match.params.id, selectBoard])\r\n\r\n    const getTitle = () => {\r\n        return activeBoard.title\r\n    }\r\n    if(activeBoard.isFetching){\r\n        return (<h1>Loading...</h1>)\r\n    }\r\n\r\n    return(\r\n        <div className=\"active-board-wrapper\">\r\n           <div className=\"active-board-title\">{getTitle()}</div>\r\n           <ListWrapper />\r\n        </div>\r\n    )\r\n};\r\n\r\nBoardsLinkWrapper.propTypes = {\r\n    activeBoard: PropTypes.object,\r\n    selectBoard: PropTypes.func\r\n}\r\n\r\nexport default connect(({ activeBoard }) => ({ \r\n    activeBoard,\r\n}), { selectBoard })(BoardsLinkWrapper);","import {SELECT_BOARD, SELECT_BOARD_SUCCESS} from './ActionType';\r\nimport find from 'lodash/find';\r\nimport Store from '../store/store';\r\n\r\n\r\nexport const selectBoard = (id) => dispatch => {\r\n    const boardsCollection = Store.getState().boardsCollection;\r\n    const activeBoard = find(boardsCollection, item => item.id === +id)\r\n\r\n    dispatch({ type: SELECT_BOARD, payload: activeBoard });\r\n    dispatch({ type: SELECT_BOARD_SUCCESS });\r\n};","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport BoardWrapper from '../components/BoardWrapper';\r\nimport BoardsLinkWrapper from '../components/BoardsLinkWrapper';\r\n\r\nconst App = () => {\r\n  return(\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={BoardWrapper} />\r\n        <Route path=\"/b/:id\" component={BoardsLinkWrapper} />\r\n        <Route component={BoardWrapper} />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/main.scss';\r\nimport App from './container/App';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport store from './store/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render((\r\n   <Provider store={store}>\r\n      <Router>\r\n         <App />\r\n      </Router>\r\n   </Provider>), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}